// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// minFunc
double minFunc(NumericVector x, NumericVector daten, int dataNA);
RcppExport SEXP spass_minFunc(SEXP xSEXP, SEXP datenSEXP, SEXP dataNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type daten(datenSEXP);
    Rcpp::traits::input_parameter< int >::type dataNA(dataNASEXP);
    rcpp_result_gen = Rcpp::wrap(minFunc(x, daten, dataNA));
    return rcpp_result_gen;
END_RCPP
}
// minFuncMult
double minFuncMult(NumericVector x, NumericMatrix daten, NumericVector dataNA, int n);
RcppExport SEXP spass_minFuncMult(SEXP xSEXP, SEXP datenSEXP, SEXP dataNASEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type daten(datenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dataNA(dataNASEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(minFuncMult(x, daten, dataNA, n));
    return rcpp_result_gen;
END_RCPP
}
// minFuncBlinded
double minFuncBlinded(NumericVector x, NumericMatrix daten, NumericVector dataNA, NumericVector n, double delta);
RcppExport SEXP spass_minFuncBlinded(SEXP xSEXP, SEXP datenSEXP, SEXP dataNASEXP, SEXP nSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type daten(datenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dataNA(dataNASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(minFuncBlinded(x, daten, dataNA, n, delta));
    return rcpp_result_gen;
END_RCPP
}
// mlFirst
double mlFirst(NumericVector y, NumericMatrix groupE, NumericMatrix groupC, int nE, int nC, NumericVector tpE, NumericVector tpC, int type);
RcppExport SEXP spass_mlFirst(SEXP ySEXP, SEXP groupESEXP, SEXP groupCSEXP, SEXP nESEXP, SEXP nCSEXP, SEXP tpESEXP, SEXP tpCSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupE(groupESEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupC(groupCSEXP);
    Rcpp::traits::input_parameter< int >::type nE(nESEXP);
    Rcpp::traits::input_parameter< int >::type nC(nCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpE(tpESEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpC(tpCSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mlFirst(y, groupE, groupC, nE, nC, tpE, tpC, type));
    return rcpp_result_gen;
END_RCPP
}
// mlFirstOneGroup
double mlFirstOneGroup(NumericVector y, NumericMatrix groupC, int nC, NumericVector tpC, int type);
RcppExport SEXP spass_mlFirstOneGroup(SEXP ySEXP, SEXP groupCSEXP, SEXP nCSEXP, SEXP tpCSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupC(groupCSEXP);
    Rcpp::traits::input_parameter< int >::type nC(nCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpC(tpCSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mlFirstOneGroup(y, groupC, nC, tpC, type));
    return rcpp_result_gen;
END_RCPP
}
// mlSecond
double mlSecond(double rho, NumericVector y, NumericMatrix groupE, NumericMatrix groupC, int nE, int nC, NumericVector tpE, NumericVector tpC, int type);
RcppExport SEXP spass_mlSecond(SEXP rhoSEXP, SEXP ySEXP, SEXP groupESEXP, SEXP groupCSEXP, SEXP nESEXP, SEXP nCSEXP, SEXP tpESEXP, SEXP tpCSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupE(groupESEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupC(groupCSEXP);
    Rcpp::traits::input_parameter< int >::type nE(nESEXP);
    Rcpp::traits::input_parameter< int >::type nC(nCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpE(tpESEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpC(tpCSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mlSecond(rho, y, groupE, groupC, nE, nC, tpE, tpC, type));
    return rcpp_result_gen;
END_RCPP
}
// mlSecondOneGroup
double mlSecondOneGroup(double rho, NumericVector y, NumericMatrix groupC, int nC, NumericVector tpC, int type);
RcppExport SEXP spass_mlSecondOneGroup(SEXP rhoSEXP, SEXP ySEXP, SEXP groupCSEXP, SEXP nCSEXP, SEXP tpCSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupC(groupCSEXP);
    Rcpp::traits::input_parameter< int >::type nC(nCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpC(tpCSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mlSecondOneGroup(rho, y, groupC, nC, tpC, type));
    return rcpp_result_gen;
END_RCPP
}
// mlFirstGrad
NumericVector mlFirstGrad(NumericVector y, NumericMatrix groupE, NumericMatrix groupC, int nE, int nC, NumericVector tpE, NumericVector tpC, int type);
RcppExport SEXP spass_mlFirstGrad(SEXP ySEXP, SEXP groupESEXP, SEXP groupCSEXP, SEXP nESEXP, SEXP nCSEXP, SEXP tpESEXP, SEXP tpCSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupE(groupESEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupC(groupCSEXP);
    Rcpp::traits::input_parameter< int >::type nE(nESEXP);
    Rcpp::traits::input_parameter< int >::type nC(nCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpE(tpESEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpC(tpCSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mlFirstGrad(y, groupE, groupC, nE, nC, tpE, tpC, type));
    return rcpp_result_gen;
END_RCPP
}
// mlFirstHObs
NumericMatrix mlFirstHObs(NumericVector y, NumericMatrix groupE, NumericMatrix groupC, int nE, int nC, NumericVector tpE, NumericVector tpC, int type);
RcppExport SEXP spass_mlFirstHObs(SEXP ySEXP, SEXP groupESEXP, SEXP groupCSEXP, SEXP nESEXP, SEXP nCSEXP, SEXP tpESEXP, SEXP tpCSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupE(groupESEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupC(groupCSEXP);
    Rcpp::traits::input_parameter< int >::type nE(nESEXP);
    Rcpp::traits::input_parameter< int >::type nC(nCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpE(tpESEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpC(tpCSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mlFirstHObs(y, groupE, groupC, nE, nC, tpE, tpC, type));
    return rcpp_result_gen;
END_RCPP
}
// mlFirstHExp
NumericMatrix mlFirstHExp(NumericVector y, double kf, int tp, int type);
RcppExport SEXP spass_mlFirstHExp(SEXP ySEXP, SEXP kfSEXP, SEXP tpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type kf(kfSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mlFirstHExp(y, kf, tp, type));
    return rcpp_result_gen;
END_RCPP
}
// mlFirstJObs
NumericMatrix mlFirstJObs(NumericVector y, NumericMatrix groupE, NumericMatrix groupC, int nE, int nC, NumericVector tpE, NumericVector tpC, int type);
RcppExport SEXP spass_mlFirstJObs(SEXP ySEXP, SEXP groupESEXP, SEXP groupCSEXP, SEXP nESEXP, SEXP nCSEXP, SEXP tpESEXP, SEXP tpCSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupE(groupESEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type groupC(groupCSEXP);
    Rcpp::traits::input_parameter< int >::type nE(nESEXP);
    Rcpp::traits::input_parameter< int >::type nC(nCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpE(tpESEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tpC(tpCSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mlFirstJObs(y, groupE, groupC, nE, nC, tpE, tpC, type));
    return rcpp_result_gen;
END_RCPP
}
// mlFirstJExp
NumericMatrix mlFirstJExp(NumericVector y, double rho, double kf, int tp, int type, int approx);
RcppExport SEXP spass_mlFirstJExp(SEXP ySEXP, SEXP rhoSEXP, SEXP kfSEXP, SEXP tpSEXP, SEXP typeSEXP, SEXP approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type kf(kfSEXP);
    Rcpp::traits::input_parameter< int >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type approx(approxSEXP);
    rcpp_result_gen = Rcpp::wrap(mlFirstJExp(y, rho, kf, tp, type, approx));
    return rcpp_result_gen;
END_RCPP
}
// mlFirstBlinded
double mlFirstBlinded(NumericVector y, NumericMatrix group, int n, NumericVector tp, int type, double theta, double k);
RcppExport SEXP spass_mlFirstBlinded(SEXP ySEXP, SEXP groupSEXP, SEXP nSEXP, SEXP tpSEXP, SEXP typeSEXP, SEXP thetaSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(mlFirstBlinded(y, group, n, tp, type, theta, k));
    return rcpp_result_gen;
END_RCPP
}
// mlSecondBlinded
double mlSecondBlinded(double rho, NumericVector y, NumericMatrix group, int n, NumericVector tp, int type, double k);
RcppExport SEXP spass_mlSecondBlinded(SEXP rhoSEXP, SEXP ySEXP, SEXP groupSEXP, SEXP nSEXP, SEXP tpSEXP, SEXP typeSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(mlSecondBlinded(rho, y, group, n, tp, type, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"spass_minFunc", (DL_FUNC) &spass_minFunc, 3},
    {"spass_minFuncMult", (DL_FUNC) &spass_minFuncMult, 4},
    {"spass_minFuncBlinded", (DL_FUNC) &spass_minFuncBlinded, 5},
    {"spass_mlFirst", (DL_FUNC) &spass_mlFirst, 8},
    {"spass_mlFirstOneGroup", (DL_FUNC) &spass_mlFirstOneGroup, 5},
    {"spass_mlSecond", (DL_FUNC) &spass_mlSecond, 9},
    {"spass_mlSecondOneGroup", (DL_FUNC) &spass_mlSecondOneGroup, 6},
    {"spass_mlFirstGrad", (DL_FUNC) &spass_mlFirstGrad, 8},
    {"spass_mlFirstHObs", (DL_FUNC) &spass_mlFirstHObs, 8},
    {"spass_mlFirstHExp", (DL_FUNC) &spass_mlFirstHExp, 4},
    {"spass_mlFirstJObs", (DL_FUNC) &spass_mlFirstJObs, 8},
    {"spass_mlFirstJExp", (DL_FUNC) &spass_mlFirstJExp, 6},
    {"spass_mlFirstBlinded", (DL_FUNC) &spass_mlFirstBlinded, 7},
    {"spass_mlSecondBlinded", (DL_FUNC) &spass_mlSecondBlinded, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_spass(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
